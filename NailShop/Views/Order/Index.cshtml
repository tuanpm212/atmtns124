@{
    ViewBag.Title = @Resources.FormTitle.formOrder;
    Layout = "~/Views/Share/_Layout.cshtml";
}

<div class="page-wrap" ng-app="MyApp" ng-controller="CtrlController">
    <section class="section-orders">
        <div class="container">
            <div class="row">
                <div class="col-sm-12 about-content">
                    <h4>@Resources.Order.titleFrom</h4>
                    <div class="form-inline">
                        <div class="form-group">
                            <label>@Resources.Order.lblFromDate</label>
                            <input id="txtFromDate" type="text" class="form-control date-control" placeholder="@Resources.Order.placeholderChooseDate">
                        </div>
                        <div class="form-group">
                            <label>@Resources.Order.lblToDate</label>
                            <input id="txtToDate" type="text" class="form-control date-control" placeholder="@Resources.Order.placeholderChooseDate">
                        </div>
                        <div class="form-group">
                            @Html.DropDownList("Status", new SelectList(ViewBag.ListStatus, "Status", "Name", "-1"), new { @class = "form-control" })
                        </div>
                        <button type="submit" data-ng-click="getPagedDataAsync()" class="btn btn-primary">@Resources.Order.btnSearch</button>
                        <a class="btn btn-primary" href="/Order/Create?ID=-1">@Resources.Order.btnCreate</a>
                    </div>
                    <br />
                    <div ui-grid="gridOrder" ui-grid-pagination class="myGrid table" style="height: 372px;"></div>
                </div>
            </div>
        </div>
    </section>

    <div class="modal fade" id="modalConfirm" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"><i class="fa fa-warning"></i>Warning</h4>
                </div>
                <div class="modal-body">
                    <p>Do you want to delete?</p>
                </div>
                <div class="modal-footer">
                    <button id="btnOk" ng-click="DeleteInvoice()" class="btn btn-primary">Ok</button>
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modalDelete" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title"><i class="fa fa-warning"></i>Warning</h4>
            </div>
            <div class="modal-body">
                <p>Order is processing, can not editing</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@section Style {
    <link href="~/Contents/css/datepicker.css" rel="stylesheet" />
    <link href="~/Contents/css/nail-order.css" rel="stylesheet" />
    <link href="~/Contents/css/ui-grid.css" rel="stylesheet" />
    <link href="~/Contents/css/frontend-ui-grid.css" rel="stylesheet" />
}

@section Scripts {
    <script src="~/Scripts/ui-grid.js"></script>
    <script src="~/Scripts/bootstrap-datepicker.js"></script>
    <script type="text/javascript">
    $(".date-control").datepicker({
        autoclose: true,
        todayHighlight: true,
        format: 'mm/dd/yyyy',
        language: 'en',
    });
    $("#txtFromDate").datepicker('setDate', '@ViewBag.FromDate');
    $("#txtToDate").datepicker('setDate', '@ViewBag.ToDate');

    var InvoiceID, RowIndex;
    var app = angular.module('MyApp', ['ui.grid', 'ui.grid.pagination']);
    app.controller('CtrlController', ['$scope', '$http', function ($scope, $http, $apply) {
        $scope.gridOrder = {
            enableSorting: true,
            enableColumnMenus: false,
            paginationPageSizes: [20, 50, 100],
            paginationPageSize: 20,
            columnDefs: [
                { name: "InvoiceNo", displayName: "@Resources.Order.gridNo", headerCellClass: 'text-center', cellClass: 'text-right', width: '100', sort: { direction: ['desc'], }, },
                { name: "InvoiceDate", displayName: "@Resources.Order.gridInvoiceDate", headerCellClass: 'text-center', cellClass: 'text-right', width: '100', cellTemplate: '<div class="ui-grid-cell-contents"> {{row.entity.InvoiceDate | resolve_date}}</div>' },
                { name: "Notes", displayName: "@Resources.Order.gridNotes", headerCellClass: 'text-center' },
                { name: "SubTotal", displayName: "@Resources.Order.gridAmount", headerCellClass: 'text-center', cellClass: 'text-right', width: '100', cellFilter: 'currencyFilter'},
                { name: "SaleTax", displayName: "@Resources.Order.gridTaxAmount", headerCellClass: 'text-center', cellClass: 'text-right', width: '100', cellFilter: 'currencyFilter'},
                { name: "Discount", displayName: "@Resources.Order.gridDiscount", headerCellClass: 'text-center', cellClass: 'text-right', width: '100', cellFilter: 'currencyFilter'},
                { name: "Total", displayName: "@Resources.Order.gridTotal", headerCellClass: 'text-center', cellClass: 'text-right', width: '100', cellFilter: 'currencyFilter'},
                { name: "", field: 'InvoiceID', displayName: "Action", cellTemplate: '<div class="ui-grid-cell-contents"><a ng-href="/order/create?id={{row.entity.InvoiceID}}">View</a>/<a href="javascript:;" ng-click="grid.appScope.Delete(row)">Delete</a></div>', headerCellClass: 'text-center', cellClass: 'text-center', width: '100', enableSorting: false },
            ],
        };

        $scope.getPagedDataAsync = function (pageSize, page) {
            if (pageSize == null) {
                $scope.gridOrder.paginationPageSize = 20;
                pageSize = 20;
            }
            if (page == null) {
                $scope.gridOrder.paginationCurrentPage = 1;
                page = 1;
            }
            $http({
                url: "/Order/GetInvoice",
                method: "GET",
                params: {
                    FromDate: $('#txtFromDate').val(),
                    ToDate: $('#txtToDate').val(),
                    Status: $('#Status').val()
                }
            }).success(function (data, status, headers, config) {
                $scope.gridOrder.data = JSON.parse(data);
            }).error(function (myJson, status, headers, config) {
                alert(JSON.stringify(myJson));
            });
        };

        $scope.getPagedDataAsync($scope.gridOrder.paginationCurrentPage, $scope.gridOrder.paginationPageSize);

        $scope.Delete = function (row) {
            InvoiceID = row.entity.InvoiceID;
            RowIndex = row.rowIndex;
            if (row.entity.InvoiceStatus == 0) {
                $('#modalConfirm').modal('show');
            }
            else {
                $('#modalDelete').modal('show');
            }
        };
        $scope.DeleteInvoice = function () {
            $http({
                url: "/Order/Delete",
                method: "POST",
                params: { ID: InvoiceID }
            }).success(function (data) {
                if (data.IsOk) {
                    $('#modalConfirm').modal('hide');
                    $scope.getPagedDataAsync($scope.gridOrder.paginationCurrentPage, $scope.gridOrder.paginationPageSize);
                }
            });
        };
    }]);

    app.filter('resolve_date', function () {
        return function (text, length, end) {
            var mResult = '', twoDigitMonth;
            var mDate = new Date(parseInt(text.substr(6)));
            twoDigitMonth = ((mDate.getMonth().length + 1) === 1) ? (mDate.getMonth() + 1) : '0' + (mDate.getMonth() + 1);
            mResult = mDate.getDate() + "/" + twoDigitMonth + "/" + mDate.getFullYear();
            return mResult;
        };
    });

    app.filter('commaSeparateNumber', function () {
        val = val.toFixed(2);
        while (/(\d+)(\d{3})/.test(val.toString())) {
            val = val.toString().replace(/(\d+)(\d{3})/, '$1' + ',' + '$2');
        }
        return val;
    });

    app.filter('currencyFilter', function () {
        return function (value) {
            return value.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');

        };
    });
</script>
}
