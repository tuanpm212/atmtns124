@{
    ViewBag.Title = @Resources.FormTitle.formOrder;
    Layout = "~/Views/Share/_Layout.cshtml";
}

<div ng-app="MyApp" class="page-wrap" ng-controller="MainController">
    <section class="section-orders">
        <div class="container">
            <div class="row">
                <div class="col-sm-12 about-content">
                    <h4>@Resources.CreateOrder.titleForm</h4>
                    <div class="row">
                        <div class="form-horizontal">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">@Resources.CreateOrder.lblBillAddress</label>
                                    <div class="col-sm-9">
                                        @Html.TextBox("BillAddress", (string)ViewBag.BillAddress, new { @class = "form-control" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">@Resources.Backend.lblCity</label>
                                    <div class="col-sm-4">
                                        @Html.TextBox("City", (string)ViewBag.City, new { @class = "form-control" })
                                    </div>
                                    <label class="col-sm-1 control-label">@Resources.Backend.lblState</label>
                                    <div class="col-sm-4">
                                        @Html.TextBox("State", (string)ViewBag.State, new { @class = "form-control" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">@Resources.Backend.lblZipCode</label>
                                    <div class="col-sm-9">
                                        @Html.TextBox("ZipCode", (string)ViewBag.ZipCode, new { @class = "form-control" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">@Resources.Backend.lblDescription</label>
                                    <div class="col-sm-9">
                                        @Html.TextArea("Description", (string)ViewBag.Description, new { @class = "form-control", rows = "5" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-sm-offset-3 col-sm-8">
                                        <div class="checkbox">
                                            <label>
                                                @{
                                                    bool IsCheck = Convert.ToBoolean(ViewBag.IsTemplate);
                                                    @Html.CheckBox("IsTemplate", IsCheck)<strong>@Resources.CreateOrder.lblOrdTemplate</strong>
                                                }
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-sm-offset-3 col-sm-8">
                                        <button id="btnSave" type="submit" data-ng-click="addNew()" class="btn btn-primary">@Resources.CreateOrder.btnSave</button>
                                        <a href="/Order" class="btn btn-primary">@Resources.CreateOrder.btnBack</a>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 text-right">
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">@Resources.CreateOrder.lblShipAddress</label>
                                    <div class="col-sm-9">
                                        @Html.TextBox("DeliveryAddress", (string)ViewBag.DeliveryAddress, new { @class = "form-control" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">@Resources.Backend.lblCity</label>
                                    <div class="col-sm-4">
                                        @Html.TextBox("CityShip", (string)ViewBag.CityShip, new { @class = "form-control" })
                                    </div>
                                    <label class="col-sm-1 control-label">@Resources.Backend.lblState</label>
                                    <div class="col-sm-4">
                                        @Html.TextBox("StateShip", (string)ViewBag.StateShip, new { @class = "form-control" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">@Resources.Backend.lblZipCode</label>
                                    <div class="col-sm-9">
                                        @Html.TextBox("ZipCodeShip", (string)ViewBag.ZipCodeShip, new { @class = "form-control" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-sm-12">
                                        <p>@Resources.CreateOrder.lblNo  @Html.Label((string)@ViewBag.InvoiceNo, new { id = "lblInvoiceNo" })</></p>
                                        <p>@Resources.CreateOrder.lblOrdDate  @Html.Label((string)@ViewBag.InvoiceDate, new { id = "lblInvoiceDate" })</p>
                                        <p>@Resources.CreateOrder.lblAmount $@Html.Label((string)@ViewBag.Amount, new { id = "lblAmount" })</p>
                                        <p>@Resources.CreateOrder.lblDiscount $@Html.Label((string)@ViewBag.DiscountAmount, new { id = "lblDiscountAmount" })</p>
                                        <p>@Resources.CreateOrder.lblTaxAmount $@Html.Label((string)@ViewBag.TaxAmount, new { id = "lblTaxAmount" })</p>
                                        <p>@Resources.CreateOrder.lblTotal $@Html.Label((string)@ViewBag.TotalAmount, new { id = "lblTotalAmount" })</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <h4 class="text-left">@Resources.CreateOrder.titleItems</h4>
                    <div ui-grid="gridOrder" ui-grid-pagination ui-grid-edit class="myGrid table" style="height: 372px;"></div>
                </div>
            </div>
        </div>
    </section>
</div>
@section Style {
    <link href="~/Contents/css/nail-order.css" rel="stylesheet" />
    <link href="~/Contents/css/ui-grid.css" rel="stylesheet" />
    <link href="~/Contents/css/backend-ui-grid.css" rel="stylesheet" />
}

@section Scripts {
    <script src="~/Scripts/ui-grid.js"></script>
    <script>
    $(document).ready(function(){
        $('[data-toggle="popover"]').popover();
    });
    var OrdID = @ViewBag.OrdID, myjson, isFristLoad=true, jsonPromotion;
    var app = angular.module('MyApp', ['ui.grid', 'ui.grid.pagination', 'ui.grid.edit']);
    app.controller('MainController', ['$scope', '$http', function ($scope, $http, $apply) {
        $scope.gridOrder = {
            enableSorting: true,
            enableColumnMenus: false,
            paginationPageSizes: [20, 50, 100],
            paginationPageSize: 20,
            columnDefs: [
                { name: "ProdNo", displayName: "@Resources.CreateOrder.gridNo", headerCellClass: 'text-center', cellClass: 'text-center', width: '100', enableCellEdit: false, sort: { direction: ['desc'], }, },
                { name: "ProductName", displayName: "@Resources.CreateOrder.gridName", headerCellClass: 'text-center', enableCellEdit: false },
                { name: "Price", displayName: "@Resources.CreateOrder.gridPrice", headerCellClass: 'text-center', cellClass: 'text-right', width: '100', enableCellEdit: false },
                { name: "Qty", displayName: "@Resources.CreateOrder.gridQty", headerCellClass: 'text-center', cellClass: 'text-right', width: '100', enableCellEdit: true },
                { name: "Discount", displayName: "@Resources.CreateOrder.gridDiscount", headerCellClass: 'text-center', cellClass: 'text-right', width: '100', enableCellEdit: false },
                { name: "Total", displayName: "@Resources.CreateOrder.gridTotal", headerCellClass: 'text-center', cellClass: 'text-right', width: '100', enableCellEdit: false },
            ],
        };

        $scope.getPagedDataAsync = function (pageSize, page, searchText) {
            if(isFristLoad)
            {
                isFristLoad=false;
                $http({
                    url: "/Order/GetOrdItem?id="+ OrdID,
                    method: "GET"

                }).success(function (data, status, headers, config) {
                    $scope.gridOrder.data = JSON.parse(data);
                    SumTotalAmount($scope.gridOrder.data);
                }).error(function (data, status, headers, config) {
                    alert(JSON.stringify(data));
                });
            }
        };

        $scope.getPagedDataAsync($scope.gridOrder.paginationCurrentPage, $scope.gridOrder.paginationPageSize);

        $scope.addNew = function ()
        {
            isQuantity = false;
            for(var i=0; i< $scope.gridOrder.data.length; i++)
            {
                if($scope.gridOrder.data[i].Qty>=0)
                {
                    isQuantity=true;
                    break;
                }
            }
            if(!isQuantity)
            {
                alert('@Resources.CreateOrder.msgQuantity');
                return;
            }
            else
            {
                var Invoice={InvoiceID: OrdID, Address: $('#BillAddress').val(), AddressAddr1S: $('#DeliveryAddress').val(), Notes: $('#Description').val(),
                    City: $('#City').val(), State: $('#State').val(), ZipCode: $('#ZipCode').val(),
                    CityShip: $('#CityShip').val(), StateShip: $('#StateShip').val(), ZipCodeShip: $('#ZipCodeShip').val(),
                    SubTotal: $('#lblAmount').html(), SaleTax: $('#lblTaxAmount').html(), Discount: $('#lblDiscountAmount').html(), Total: $('#lblTotalAmount').html(), IsTemplate: $('#IsTemplate').val()};
                $http({
                    url: "/Order/SaveData",
                    method: "Post",
                    data:{invoice: Invoice, ordItems: $scope.gridOrder.data}
                }).success(function (data) {
                    if(data.IsOk)
                        window.location.href="/Order";
                });
            }
        };

        $scope.gridOrder.onRegisterApi = function(gridApi) {
            $scope.gridApi = gridApi;
            gridApi.edit.on.afterCellEdit($scope, function(rowEntity, colDef, newValue, oldValue) {
                if (newValue != oldValue) {
                    SumTotalAmount($scope.gridOrder.data);
                };
            });
        };

    }]);

    function SumTotalAmount(json)
    {
        var mDiscount=0, mAmount=0, mPercent;
        var Total=0, Discount=0, TaxAmount=0, Amount=0;
        for(var i=0; i<json.length; i++)
        {
            mPercent = GetPromotion(json[i].CategoryID, json[i].ProductID, json[i].Qty);
            mDiscount = (json[i].Price*mPercent/100)*json[i].Qty;
            mAmount = json[i].Price*json[i].Qty;
            json[i].Discount = mDiscount;
            json[i].SubTotal = mAmount;
            json[i].Total = mAmount-mDiscount;

            Discount += mDiscount;
            Amount += mAmount;
        }
        Total = Amount + TaxAmount - Discount;
        $('#lblAmount').html(commaSeparateNumber(Amount));
        $('#lblDiscountAmount').html(commaSeparateNumber(Discount));
        $('#lblTaxAmount').html(commaSeparateNumber(TaxAmount));
        $('#lblTotalAmount').html(commaSeparateNumber(Total));
    }

    function GetPromotion(CategoryID, ProductID, Quantity)
    {
        if(jsonPromotion==null || jsonPromotion.length==0)
            return 0;

        for(var i =0; i< jsonPromotion.length; i++)
        {
            if(jsonPromotion[i].CategoryID==null && jsonPromotion[i].ProductID==null && jsonPromotion[i].Quantity<=Quantity)
                return jsonPromotion[i].Percent;
            else
            {
                if(jsonPromotion[i].CategoryID!=null && jsonPromotion[i].CategoryID==CategoryID && jsonPromotion[i].Quantity<=Quantity)
                    return jsonPromotion[i].Percent;
                if(jsonPromotion[i].ProductID!=null && jsonPromotion[i].ProductID==ProductID && jsonPromotion[i].Quantity<=Quantity)
                    return  jsonPromotion[i].Percent;
            }
        }
        return 0;
    }

    LoadPromotion();
    IsEdit();

    function LoadPromotion()
    {
        $.ajax({
            url: "/Order/GetPromotionRule",
            type: 'Get',
            success: function (data) {
                if (data != null) {
                    jsonPromotion=JSON.parse(data);
                }
            }
        });
    }

    function IsEdit()
    {
        if('@ViewBag.IsEdit'=='False')
            $(btnSave).addClass('hide');
    }

    function commaSeparateNumber(val) {
        val = val.toFixed(2);
        while (/(\d+)(\d{3})/.test(val.toString())) {
            val = val.toString().replace(/(\d+)(\d{3})/, '$1' + ',' + '$2');
        }
        return val;
    }
    </script>
}